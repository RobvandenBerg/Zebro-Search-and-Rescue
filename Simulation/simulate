secs_to_human() {
    if [[ -z ${1} || ${1} -lt 60 ]] ;then
        min=0 ; secs="${1}"
    else
        time_mins=$(echo "scale=2; ${1}/60" | bc)
        min=$(echo ${time_mins} | cut -d'.' -f1)
        secs="0.$(echo ${time_mins} | cut -d'.' -f2)"
        secs=$(echo ${secs}*60|bc|awk '{print int($1+0.5)}')
    fi
    echo "Time Elapsed : ${min} minutes and ${secs} seconds."
}

ARENA=0
NUMBOTS=10
LENGTH=100000
SEED=124
USE_VISUALIZATION=0
CHECK_OCCLUSIONS=""
VERBOSE=false
PACKET_DROP_PROB=0.0
DEBUG=false
TARGET_DISTANCE="4"
DONATION_RATE="10.0"
KILL_CHANCE=0
NOISE=0


POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -a|--arena)
    ARENA="$2"
    shift # past argument
    shift # past value
    ;;
    -b|--bots)
    NUMBOTS="$2"
    shift # past argument
    shift # past value
    ;;
    -d|--duration)
    LENGTH="$2"
    shift # past argument
    shift # past value
    ;;
    -g|--gui)
    USE_VISUALIZATION=1
	DEBUG=true
    shift # past argument
    ;;
    -p|--packet_drop_prob)
    PACKET_DROP_PROB="$2"
    shift # past argument
    shift # past value
    ;;
    -r|--donation_rate)
    DONATION_RATE="$2"
    shift # past argument
    shift # past value
    ;;
	-s|--seed)
    SEED="$2"
    shift # past argument
    shift # past value
    ;;
	-t|--target_distance)
    TARGET_DISTANCE="$2"
    shift # past argument
    shift # past value
    ;;
    -k|--kill_chance)
    KILL_CHANCE="$2"
    shift # past argument
    shift # past value
    ;;
	-c|--check-occlusions)
	CHECK_OCCLUSIONS="check_occlusions=\"false\""
	shift # past argument
	shift # past value
	;;
	-v|--verbose)
	VERBOSE=true
	shift # past argument
	;;
	-n|--noise)
	NOISE="$2"
	shift # past argument
	shift # past value
	;;
	-h|--help)
	echo "This is a Zebro search mission simulator."
	echo "Parameters:"
	echo "[-a || --arena] *id*: use arena id *id*"
	echo "[-b || --bots] *number*: use *number* amount of bots"
	echo "[-d || --duration] *seconds*: run the simulation for a maximum duration of *seconds* seconds"
	echo "[-g || -gui]: run the simulation with visualisation in the Argos GUI"
	echo "[-c || --check-occlusions]: restrict communication to line-of-sight only"
	echo "[-p || --packet_drop_prob] *probability*: set the probability that a packet gets dropped"
	echo "[-r || --donation_rate] *rate*: set the donation rate of base keepers"
	echo "[-t || --target_distance] *distance*: set the target distance (only applicable in arena 4)"
	echo "[-k || --kill_chance] *chance*: set the chance that a bot randomly dies every tick to 1 in *chance* (use 0 for a chance of 0)"
	echo "[-n || --noise] *distance*: set the maximum localisation measurement error in cm (default: 0)"
	echo "[-v || --verbose]: Verbose output"
	echo ""
	echo "Author: Rob van den Berg. Email: robvandenberg@letsinspire.com"
	exit
	;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

VAR=$NUMBOTS
ROWSIZE=$(bc <<< "scale=0; sqrt($VAR-1)+1")
#SPREADSIZE=$(bc <<< "scale=3; 1/$ROWSIZE")
SPREADSIZE=0.2

if [ $VERBOSE = true ]
then
	echo "Amount of bots: $NUMBOTS"
	echo "rows and columns: $ROWSIZE"
	echo "Spreadsize is $SPREADSIZE"
	echo "Seed is $SEED"
fi

STARTX="1.0"
STARTY="1.0"

TARGETX="0.0"
TARGETY="0.0"

ARENA_SIZE_X=8
ARENA_SIZE_Y=8

WALLS=""

CORRECT_ARENA=0
if [ $ARENA = 1 ]
then
	CORRECT_ARENA=1
	if [ $VERBOSE = true ]
	then
		echo "You chose arena number 1."
	fi
	STARTX="2.0"
	STARTY="2.0"
	WALLS="<box id=\"wall_north\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,-1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"-1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_north2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,-4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"4,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"-4,0,0\" orientation=\"0,0,0\" /></box>"
	TARGETX="3.8"
	TARGETY="3.8"
fi
if [ $ARENA = 2 ]
then
	CORRECT_ARENA=2
	if [ $VERBOSE = true ]
	then
		echo "You chose arena number 2."
	fi
	STARTX="2.0"
	STARTY="2.0"
	WALLS="<box id=\"wall_north\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,-1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"-1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_north2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,-4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"4,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"-4,0,0\" orientation=\"0,0,0\" /></box>"
	TARGETX="3"
	TARGETY="-3"
fi
if [ $ARENA = 3 ]
then
	CORRECT_ARENA=3
	if [ $VERBOSE = true ]
	then
		echo "You chose arena number 3."
	fi
	STARTX="2.0"
	STARTY="2.0"
	WALLS="<box id=\"wall_north\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"0,-1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"-1,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_north2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south2\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"0,-4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"4,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west2\" size=\"0.1,8,0.5\" movable=\"false\"><body position=\"-4,0,0\" orientation=\"0,0,0\" /></box>"
	TARGETX="-3"
	TARGETY="-3"
fi
if [ $ARENA = 4 ]
then
	CORRECT_ARENA=4
	if [ $VERBOSE = true ]
	then
		echo "You chose arena number 4."
	fi
	ARENA_SIZE_X=16
	ARENA_SIZE_Y=16
	WALLS="<box id=\"wall_north\" size=\"16,0.1,0.5\" movable=\"false\"><body position=\"0,8,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south\" size=\"16,0.1,0.5\" movable=\"false\"><body position=\"0,-8,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east\" size=\"0.1,16,0.5\" movable=\"false\"><body position=\"8,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west\" size=\"0.1,16,0.5\" movable=\"false\"><body position=\"-8,0,0\" orientation=\"0,0,0\" /></box>"
	STARTX="0.0"
	STARTY="0.0"
	TARGETX=$TARGET_DISTANCE
	TARGETY="0"
fi
if [ $ARENA = 5 ]
then
	CORRECT_ARENA=5
	if [ $VERBOSE = true ]
	then
		echo "You chose arena number 5."
	fi
	ARENA_SIZE_X=12
	ARENA_SIZE_Y=12
	WALLS="<box id=\"wall_north\" size=\"12,0.1,0.5\" movable=\"false\"><body position=\"0,6,0\" orientation=\"0,0,0\" /></box><box id=\"wall_south\" size=\"12,0.1,0.5\" movable=\"false\"><body position=\"0,-6,0\" orientation=\"0,0,0\" /></box><box id=\"wall_east\" size=\"0.1,12,0.5\" movable=\"false\"><body position=\"6,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_west\" size=\"0.1,12,0.5\" movable=\"false\"><body position=\"-6,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_1\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"4,-5,0\" orientation=\"0,0,0\" /></box><box id=\"wall_2\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"3,-4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_3\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"-2,-3,0\" orientation=\"0,0,0\" /></box><box id=\"wall_4\" size=\"8,0.1,0.5\" movable=\"false\"><body position=\"2,-2,0\" orientation=\"0,0,0\" /></box><box id=\"wall_5\" size=\"0.1,4,0.5\" movable=\"false\"><body position=\"-4,-2,0\" orientation=\"0,0,0\" /></box><box id=\"wall_6\" size=\"4,0.1,0.5\" movable=\"false\"><body position=\"-2,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_7\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"0,-1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_8\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"3,0,0\" orientation=\"0,0,0\" /></box><box id=\"wall_9\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"4,1,0\" orientation=\"0,0,0\" /></box><box id=\"wall_10a\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"0,3,0\" orientation=\"0,0,0\" /></box><box id=\"wall_10\" size=\"6,0.1,0.5\" movable=\"false\"><body position=\"-1,2,0\" orientation=\"0,0,0\" /></box><box id=\"wall_11\" size=\"2,0.1,0.5\" movable=\"false\"><body position=\"3,4,0\" orientation=\"0,0,0\" /></box><box id=\"wall_12\" size=\"0.1,2,0.5\" movable=\"false\"><body position=\"2,5,0\" orientation=\"0,0,0\" /></box><box id=\"wall_13\" size=\"6,0.1,0.5\" movable=\"false\"><body position=\"-3,4,0\" orientation=\"0,0,0\" /></box>"
	STARTX="4.2"
	STARTY="-5.2"
	TARGETX="-5"
	TARGETY="5"
	
fi
if [ $CORRECT_ARENA = 0 ]
then
	echo "No valid arena specified. Use -a *arena id* to specify an arena"
	echo "Use -h or --help to see all possible parameters"
	exit
fi

TARGET="<target x=\"$TARGETX\" y=\"$TARGETY\"/>"

VISUALIZATION=""
if [ $USE_VISUALIZATION = 1 ]
then
	VISUALIZATION="<visualization><qt-opengl><user_functions library=\"build/loop_functions/zone_loop_functions/libzone_loop_functions\" label=\"zone_qtuser_functions\" /></qt-opengl></visualization>"
fi



x=0
y=0
BOTS=""
for i in $(seq 1 $NUMBOTS)
do
	#echo "Welcome $i times"
	BOTX=$(bc <<< "scale=2; $STARTX+$x*$SPREADSIZE")
	BOTY=$(bc <<< "scale=2; $STARTY+$y*$SPREADSIZE")
	#echo "BOTX is $BOTX and BOTY = $BOTY"
	
	
	BOT="<foot-bot id=\"fb_$i\"><body position=\"$BOTX,$BOTY,0\" orientation=\"0,0,0\" /><controller config=\"fzc\"/></foot-bot>"
	BOTS="$BOTS$BOT"
	
	
	x=$(($x+1))
	if [ $x = $ROWSIZE ]
	then
		x=0
		y=$(($y+1))
	fi
done

if [ $VERBOSE = true ]
then
	echo "Start coordinates are ($STARTX,$STARTY)."
	#echo $TARGET
	#echo $WALLS
	#echo "Using $NUMBOTS bots."
	echo "Max simulation duration: $LENGTH seconds."
fi

sed "s~\$TARGET~$TARGET~g; s~\$WALLS~$WALLS~g; s~\$BOTS~$BOTS~g; s~\$LENGTH~$LENGTH~g; s~\$VISUALIZATION~$VISUALIZATION~g; s~\$SEED~$SEED~g; s~\$CHECK_OCCLUSIONS~$CHECK_OCCLUSIONS~g; s~\$PACKET_DROP_PROB~$PACKET_DROP_PROB~g; s~\$DEBUG~$DEBUG~g; s~\$ARENA_SIZE_X~$ARENA_SIZE_X~g; s~\$ARENA_SIZE_Y~$ARENA_SIZE_Y~g; s~\$DONATION_RATE~$DONATION_RATE~g; s~\$KILL_CHANCE~$KILL_CHANCE~g; s~\$NOISE~$NOISE~g" argos_file_template.txt > generated.argos


#output=$(sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" <<< $output)
start=$(date +%s)

#echo "Starting Process..."
#TARGET_ID=""
coproc simulationprocess (trap 'argos3 -c generated.argos < /dev/null & disown' PIPE EXIT) # since it's in the bg, input won't be useful

if [ $VERBOSE = true ]
then
	echo "The coprocess array: ${simulationprocess[@]}"
	echo "The PID of the coprocess is ${simulationprocess_PID}"
fi
pid=${simulationprocess_PID}
pid=$((pid+1))
echo "Running the Argos3 simulation started with a process ID of $pid..."                                                                          


target_found=false
mission_failed=false
while read -r line; do
	if [ $VERBOSE = true ]
	then
		echo "$line"
	fi
	#kill $pid
	#line=$(sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' <<< $line)
	#echo "$line"
	if [[ $line == *"Mission accomplished"* ]];
	then
		target_found=true
		#echo "Target was found: $line"
		kill $pid
		#break;
		line=$(sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' <<< $line)
		#echo "$line"
		#TEST=$(sed -e 's/[^0-9]/ /g' <<< $line)
		NUMBERS=$(echo "$line" | sed -e 's/[^0-9]/ /g' -e 's/^ *//g' -e 's/ *$//g' | tr -s ' ' | sed 's/ /\n/g')
		TICKS_PASSED=$(echo $NUMBERS | awk '{print $2}')
		PATH_LENGTH_INT=$(echo $NUMBERS | awk '{print $3}')
		PATH_LENGTH_DEC=$(echo $NUMBERS | awk '{print $4}')
		echo -e "\e[32mThe target was found after $TICKS_PASSED ticks. Path length: $PATH_LENGTH_INT.$PATH_LENGTH_DEC\e[0m"
		break
	fi
	if [[ $line == *"Mission failed"* ]];
	then
		target_found=false
		mission_failed=true
		kill $pid
		line=$(sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' <<< $line)
		echo -e "\e[31m$line\e[0m"
		break
	fi
	if [[ $line == "" ]];
	then
		echo "No output."
		#kill $pid
	fi
done <&${simulationprocess[0]} # redirect in from coprocess output

if [ $mission_failed = false ]
then
	if [ $target_found = false ]
	then
		echo -e "\e[31mThe time limit of $LENGTH seconds was reached and the target was not found.\e[0m"
	fi
fi

status=$?
## take some decision ## 
#[ $status -eq 0 ] && echo "$cmd command was successful" || echo "$cmd failed"
secs_to_human "$(($(date +%s) - ${start}))"

#echo "Time taken: $TIME_TAKEN"
